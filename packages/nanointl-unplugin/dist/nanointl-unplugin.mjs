import{createUnplugin as n}from"unplugin";import r from"fs/promises";import{resolve as e}from"path";function t(n,r){(null==r||r>n.length)&&(r=n.length);for(var e=0,t=new Array(r);e<r;e++)t[e]=n[e];return t}var i=n(function(n){if(!n.localesDir)throw new Error('[@nanointl/unplugin] "localesDir" is a required option');if(!n.defaultLocale)throw new Error('[@nanointl/unplugin] "defaultLocale" is a required option');return{name:"@nanointl/unplugin",resolveInclude:function(n){return"@nanointl/unplugin/runtime"===n},resolveId:function(n){if("@nanointl/unplugin/runtime"===n)return"@nanointl/unplugin/runtime"},loadInclude:function(n){return!!(n.includes("@nanointl/unplugin/dist/runtime.mjs")||n.includes("@nanointl/unplugin/dist/runtime.js")||n.includes("/nanointl-unplugin/dist/runtime.mjs")||n.includes("/nanointl-unplugin/dist/runtime.js")||"@nanointl/unplugin/runtime"===n)},load:function(){try{var i,o=this,l=null!=(i=process.env.LOCALE)?i:n.defaultLocale;return Promise.resolve(r.readdir(n.localesDir)).then(function(r){if(r.length){if(r.includes(l+".json")){for(var i,a=function(n,r){var e="undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(e)return(e=e.call(n)).next.bind(e);if(Array.isArray(n)||(e=function(n,r){if(n){if("string"==typeof n)return t(n,r);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?t(n,r):void 0}}(n))){e&&(n=e);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(r);!(i=a()).done;)o.addWatchFile(e(n.localesDir,i.value));var u=e(n.localesDir,l+".json"),s=r.map(function(r){var t=r.split(".").slice(0,-1).join("."),i=e(n.localesDir,r);return"["+JSON.stringify(t)+"]: () => import("+JSON.stringify(i)+").then(x => x.default)"});return"\n        export const initLocale = "+JSON.stringify(l)+";\n        import _initMessages from "+JSON.stringify(u)+";\n        export const initMessages = _initMessages;\n        export const loadMessages = { "+s.join(", ")+" };\n      "}o.error("Locale "+l+' (was searching for "'+l+'.json") was not found in '+n.localesDir)}else o.error("No locales was found in "+n.localesDir)})}catch(n){return Promise.reject(n)}}}}),o=i.vite,l=i.rollup,a=i.webpack,u=i.esbuild;export{u as nanointlEsbuildPlugin,l as nanointlRollupPlugin,o as nanointlVitePlugin,a as nanointlWebpackPlugin,i as unplugin};
//# sourceMappingURL=nanointl-unplugin.mjs.map
